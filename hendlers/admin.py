from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards import button
from bot import bot


CHANNEL_ID = "@test_channel123456765"


class FSMbron(StatesGroup):
    name = State()
    time = State()
    date = State()
    people = State()
    phone_number = State()


# –ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
#@dp.message_handler(text='üìû –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', state=None)
async def cmd_start(message: types.Message):
    await FSMbron.name.set()
    await message.reply('üë§ –ù–∞ —á—å–µ –∏–º—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫?', reply_markup=button.nacotmBtn)


#@dp.message_handler(text=['name'], state=FSMbron.name)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text != "‚ùå –û–¢–ú–ï–ù–ò–¢–¨":
            data['name'] = message.text
            await FSMbron.next()
            await message.reply('üìÖ –ù–∞ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫?', reply_markup=button.dataBtn)
        else:
            await message.reply("–ü–ï–†–ï–•–û–î –ù–ê –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", reply_markup=button.mainMenu)
            await state.finish()


#@dp.message_handler(text=['date'], state=FSMbron.date)
async def load_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date'] = message.text
        await FSMbron.next()
        await message.reply('üïó –í–æ —Å–∫–æ–ª—å–∫–æ –ø–æ–¥–æ–π–¥–µ—Ç–µ?', reply_markup=button.timeBtn)


#@dp.message_handler(text=['time'], state=FSMbron.time)
async def load_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['time'] = message.text
        await FSMbron.next()
        await message.reply('üë™ –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤–∞—Å –±—É–¥–µ—Ç?', reply_markup=button.pepBtn)


#@dp.message_handler(text=['people'], state=FSMbron.people)
async def load_people(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['people'] = message.text
        await FSMbron.next()
        await message.reply('–ò –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–∫ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', reply_markup=types.ReplyKeyboardRemove())


#@dp.message_handler(text=['phone_number'], state=FSMbron.phone_number)
async def load_phone_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone_number'] = message.text
        await FSMbron.next()
        await message.reply(f"–û—Ç–ª–∏—á–Ω–æ!\n"
                            f"–ò—Ç–∞–∫, {data['time']} –≤ {data['people']}\n"
                            f"–Ω–∞ –∏–º—è {data['name']} –±—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å!\n", reply_markup=button.otmBtn)


async def cencel_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == "‚úÖ –î–ê":
            await message.reply("–ë—Ä–æ–Ω—å –ø—Ä–∏–Ω—è—Ç–∞", reply_markup=button.mainMenu)
            await bot.send_message(CHANNEL_ID, f"–ë—Ä–æ–Ω—å:\n"
                                            f"–§.–ò.–û: {data['name']}\n"
                                            f"–í—Ä–µ–º—è: {data['people']}\n"
                                            f"–î–∞—Ç–∞: {data['time']}\n"
                                            f"–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π: {data['date']}\n"
                                            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone_number']}")
        elif message.text == "‚ùå –ù–ï–¢":
            await bot.send_message(message.from_user.id, "–ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=button.mainMenu)
        await state.finish()


def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(cmd_start, text='üìû –ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨', state=None)
    dp.register_message_handler(load_name, state=FSMbron.name)
    dp.register_message_handler(load_date, state=FSMbron.date)
    dp.register_message_handler(load_time, state=FSMbron.time)
    dp.register_message_handler(load_people, state=FSMbron.people)
    dp.register_message_handler(load_phone_number, state=FSMbron.phone_number)
    dp.register_message_handler(cencel_message)
